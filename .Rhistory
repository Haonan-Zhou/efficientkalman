# Simulate Data
set.seed(209)
w = rnorm(1001, 0, 1)
v = rnorm(1000, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
xfiltered = kalmanR(y, mu0, 1, 1, 1, 1, 1)
plot(1:1000, x[-1], ylim= c(-5, max(x)+1), xlab = "Time", ylab = "True x value")
lines(xfiltered, lty="dashed", col="blue")
lines(y, lty="dashed", col="orange")
## Kalman Filter Exercise
# A very simple Kalman Filter
kalmanR = function(y, x0, Sigma0, A, Phi, Q, R){
## This function performs kalman filtering based on the following model (Shumway and Stoffer, 2013):
# Assume no exogenous variable, u_{t} exists
# x_t = Phi x_{t-1} + w_t, w_t ~ N(0,Q)  (state equation / law of motion)
# y_t = A x_{t} + v_t, v_t ~ N(0,R)      (measurement equation)
# With known initial condition x_{0}^{0} = mu_{0}, P_{0}^{0} = Sigma0,
# the classic Kalman filter gives the result
# x_{t}^{t-1} = x_{t-1}^{t-1}
# P_{t}^{t-1} = Phi P_{t-1}^{t-1} Phi' + Q
# Apply the measurement equation, we have
# x_{t}^{t} = x_{t}^{t-1} + K_t (y_t - A_t x_{t}^{t-1})
# P_{t}^{t} = (I - K_t A_t)P_{t}^{t-1}
# where the Kalman gain, K_t, is given by
# K_t = P_{t}^{t-1} A_t'[A_t P_{t}^{t-1} A_t' + R]^{-1}
P0 = Sigma0
n = length(x0)
x = x0
xvec = c()
P = P0
for (i in 1:length(y)){
## Prediction Step
xhat = Phi %*% x
Phat = Phi %*% P %*% t(Phi) + Q
## Filtering Step
# Kalman Gain
K = Phat %*% t(A) %*% solve(A %*% Phat %*% t(A) + R)
x = xhat + K %*% (y[i] - A %*% xhat)
P = (diag(n)-K %*% A) %*% Phat
xvec = c(xvec, x)
}
return(xvec)
}
## Simple test example
# y = x + v  v ~ N(0, sigma_v^2)
# x = x' + w  w ~ N(0, sigma_w^2)
# Simulate Data
set.seed(209)
w = rnorm(1001, 0, 1)
v = rnorm(1000, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
xfiltered = kalmanR(y, mu0, 1, 1, 1, 1, 1)
plot(1:1000, x[-1], ylim= c(-5, max(x)+1), xlab = "Time", ylab = "True x value")
lines(xfiltered, lty="dashed", col="blue")
lines(y, lty="dashed", col="orange")
mean(x[-1]-xfiltered)
## Kalman Filter Exercise
# A very simple Kalman Filter
kalmanR = function(y, x0, Sigma0, A, Phi, Q, R){
## This function performs kalman filtering based on the following model (Shumway and Stoffer, 2013):
# Assume no exogenous variable, u_{t} exists
# x_t = Phi x_{t-1} + w_t, w_t ~ N(0,Q)  (state equation / law of motion)
# y_t = A x_{t} + v_t, v_t ~ N(0,R)      (measurement equation)
# With known initial condition x_{0}^{0} = mu_{0}, P_{0}^{0} = Sigma0,
# the classic Kalman filter gives the result
# x_{t}^{t-1} = x_{t-1}^{t-1}
# P_{t}^{t-1} = Phi P_{t-1}^{t-1} Phi' + Q
# Apply the measurement equation, we have
# x_{t}^{t} = x_{t}^{t-1} + K_t (y_t - A_t x_{t}^{t-1})
# P_{t}^{t} = (I - K_t A_t)P_{t}^{t-1}
# where the Kalman gain, K_t, is given by
# K_t = P_{t}^{t-1} A_t'[A_t P_{t}^{t-1} A_t' + R]^{-1}
P0 = Sigma0
n = length(x0)
x = x0
xvec = c()
P = P0
for (i in 1:length(y)){
## Prediction Step
xhat = Phi %*% x
Phat = Phi %*% P %*% t(Phi) + Q
## Filtering Step
# Kalman Gain
K = Phat %*% t(A) %*% solve(A %*% Phat %*% t(A) + R)
x = xhat + K %*% (y[i] - A %*% xhat)
P = (diag(n)-K %*% A) %*% Phat
xvec = c(xvec, x)
}
return(xvec)
}
## Simple test example
# y = x + v  v ~ N(0, sigma_v^2)
# x = x' + w  w ~ N(0, sigma_w^2)
# Simulate Data
w = rnorm(1001, 0, 1)
v = rnorm(1000, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
xfiltered = kalmanR(y, mu0, 1, 1, 1, 1, 1)
plot(1:1000, x[-1], ylim= c(-5, max(x)+1), xlab = "Time", ylab = "True x value")
lines(xfiltered, lty="dashed", col="blue")
lines(y, lty="dashed", col="orange")
## Kalman Filter Exercise
# A very simple Kalman Filter
kalmanR = function(y, x0, Sigma0, A, Phi, Q, R){
## This function performs kalman filtering based on the following model (Shumway and Stoffer, 2013):
# Assume no exogenous variable, u_{t} exists
# x_t = Phi x_{t-1} + w_t, w_t ~ N(0,Q)  (state equation / law of motion)
# y_t = A x_{t} + v_t, v_t ~ N(0,R)      (measurement equation)
# With known initial condition x_{0}^{0} = mu_{0}, P_{0}^{0} = Sigma0,
# the classic Kalman filter gives the result
# x_{t}^{t-1} = x_{t-1}^{t-1}
# P_{t}^{t-1} = Phi P_{t-1}^{t-1} Phi' + Q
# Apply the measurement equation, we have
# x_{t}^{t} = x_{t}^{t-1} + K_t (y_t - A_t x_{t}^{t-1})
# P_{t}^{t} = (I - K_t A_t)P_{t}^{t-1}
# where the Kalman gain, K_t, is given by
# K_t = P_{t}^{t-1} A_t'[A_t P_{t}^{t-1} A_t' + R]^{-1}
P0 = Sigma0
n = length(x0)
x = x0
xvec = c()
P = P0
for (i in 1:length(y)){
## Prediction Step
xhat = Phi %*% x
Phat = Phi %*% P %*% t(Phi) + Q
## Filtering Step
# Kalman Gain
K = Phat %*% t(A) %*% solve(A %*% Phat %*% t(A) + R)
x = xhat + K %*% (y[i] - A %*% xhat)
P = (diag(n)-K %*% A) %*% Phat
xvec = c(xvec, x)
}
return(xvec)
}
## Simple test example
# y = x + v  v ~ N(0, sigma_v^2)
# x = x' + w  w ~ N(0, sigma_w^2)
# Simulate Data
w = rnorm(1001, 0, 1)
v = rnorm(1000, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
xfiltered = kalmanR(y, mu0, 1, 1, 1, 1, 1)
plot(1:1000, x[-1], ylim= c(min(x)-1, max(x)+1), xlab = "Time", ylab = "True x value")
lines(xfiltered, lty="dashed", col="blue")
lines(y, lty="dashed", col="orange")
## Kalman Filter Exercise
# A very simple Kalman Filter
kalmanR = function(y, x0, Sigma0, A, Phi, Q, R){
## This function performs kalman filtering based on the following model (Shumway and Stoffer, 2013):
# Assume no exogenous variable, u_{t} exists
# x_t = Phi x_{t-1} + w_t, w_t ~ N(0,Q)  (state equation / law of motion)
# y_t = A x_{t} + v_t, v_t ~ N(0,R)      (measurement equation)
# With known initial condition x_{0}^{0} = mu_{0}, P_{0}^{0} = Sigma0,
# the classic Kalman filter gives the result
# x_{t}^{t-1} = x_{t-1}^{t-1}
# P_{t}^{t-1} = Phi P_{t-1}^{t-1} Phi' + Q
# Apply the measurement equation, we have
# x_{t}^{t} = x_{t}^{t-1} + K_t (y_t - A_t x_{t}^{t-1})
# P_{t}^{t} = (I - K_t A_t)P_{t}^{t-1}
# where the Kalman gain, K_t, is given by
# K_t = P_{t}^{t-1} A_t'[A_t P_{t}^{t-1} A_t' + R]^{-1}
P0 = Sigma0
n = length(x0)
x = x0
xvec = c()
P = P0
for (i in 1:length(y)){
## Prediction Step
xhat = Phi %*% x
Phat = Phi %*% P %*% t(Phi) + Q
## Filtering Step
# Kalman Gain
K = Phat %*% t(A) %*% solve(A %*% Phat %*% t(A) + R)
x = xhat + K %*% (y[i] - A %*% xhat)
P = (diag(n)-K %*% A) %*% Phat
xvec = c(xvec, x)
}
return(xvec)
}
## Simple test example
# y = x + v  v ~ N(0, sigma_v^2)
# x = x' + w  w ~ N(0, sigma_w^2)
# Simulate Data
w = rnorm(1001, 0, 1)
v = rnorm(1000, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
xfiltered = kalmanR(y, mu0, 1, 1, 1, 1, 1)
plot(1:1000, x[-1], ylim= c(min(x)-1, max(x)+1), xlab = "Time", ylab = "True x value")
lines(xfiltered, lty="dashed", col="blue")
lines(y, lty="dashed", col="orange")
mean(x[-1]-xfiltered)
## Kalman Filter Exercise
# A very simple Kalman Filter
kalmanR = function(y, x0, Sigma0, A, Phi, Q, R){
## This function performs kalman filtering based on the following model (Shumway and Stoffer, 2013):
# Assume no exogenous variable, u_{t} exists
# x_t = Phi x_{t-1} + w_t, w_t ~ N(0,Q)  (state equation / law of motion)
# y_t = A x_{t} + v_t, v_t ~ N(0,R)      (measurement equation)
# With known initial condition x_{0}^{0} = mu_{0}, P_{0}^{0} = Sigma0,
# the classic Kalman filter gives the result
# x_{t}^{t-1} = x_{t-1}^{t-1}
# P_{t}^{t-1} = Phi P_{t-1}^{t-1} Phi' + Q
# Apply the measurement equation, we have
# x_{t}^{t} = x_{t}^{t-1} + K_t (y_t - A_t x_{t}^{t-1})
# P_{t}^{t} = (I - K_t A_t)P_{t}^{t-1}
# where the Kalman gain, K_t, is given by
# K_t = P_{t}^{t-1} A_t'[A_t P_{t}^{t-1} A_t' + R]^{-1}
P0 = Sigma0
n = length(x0)
x = x0
xvec = c()
P = P0
for (i in 1:length(y)){
## Prediction Step
xhat = Phi %*% x
Phat = Phi %*% P %*% t(Phi) + Q
## Filtering Step
# Kalman Gain
K = Phat %*% t(A) %*% solve(A %*% Phat %*% t(A) + R)
x = xhat + K %*% (y[i] - A %*% xhat)
P = (diag(n)-K %*% A) %*% Phat
xvec = c(xvec, x)
}
return(xvec)
}
## Simple test example
# y = x + v  v ~ N(0, sigma_v^2)
# x = x' + w  w ~ N(0, sigma_w^2)
# Simulate Data
w = rnorm(1001, 0, 1)
v = rnorm(1000, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
xfiltered = kalmanR(y, mu0, 1, 1, 1, 1, 1)
plot(1:1000, x[-1], ylim= c(min(x)-1, max(x)+1), xlab = "Time", ylab = "True x value")
lines(xfiltered, lty="dashed", col="blue")
lines(y, lty="dashed", col="orange")
mean(x[-1]-xfiltered)
## Kalman Filter Exercise
# A very simple Kalman Filter
kalmanR = function(y, x0, Sigma0, A, Phi, Q, R){
## This function performs kalman filtering based on the following model (Shumway and Stoffer, 2013):
# Assume no exogenous variable, u_{t} exists
# x_t = Phi x_{t-1} + w_t, w_t ~ N(0,Q)  (state equation / law of motion)
# y_t = A x_{t} + v_t, v_t ~ N(0,R)      (measurement equation)
# With known initial condition x_{0}^{0} = mu_{0}, P_{0}^{0} = Sigma0,
# the classic Kalman filter gives the result
# x_{t}^{t-1} = x_{t-1}^{t-1}
# P_{t}^{t-1} = Phi P_{t-1}^{t-1} Phi' + Q
# Apply the measurement equation, we have
# x_{t}^{t} = x_{t}^{t-1} + K_t (y_t - A_t x_{t}^{t-1})
# P_{t}^{t} = (I - K_t A_t)P_{t}^{t-1}
# where the Kalman gain, K_t, is given by
# K_t = P_{t}^{t-1} A_t'[A_t P_{t}^{t-1} A_t' + R]^{-1}
P0 = Sigma0
n = length(x0)
x = x0
xvec = c()
P = P0
for (i in 1:length(y)){
## Prediction Step
xhat = Phi %*% x
Phat = Phi %*% P %*% t(Phi) + Q
## Filtering Step
# Kalman Gain
K = Phat %*% t(A) %*% solve(A %*% Phat %*% t(A) + R)
x = xhat + K %*% (y[i] - A %*% xhat)
P = (diag(n)-K %*% A) %*% Phat
xvec = c(xvec, x)
}
return(xvec)
}
## Simple test example
# y = x + v  v ~ N(0, sigma_v^2)
# x = x' + w  w ~ N(0, sigma_w^2)
# Simulate Data
w = rnorm(1001, 0, 1)
v = rnorm(1000, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
xfiltered = kalmanR(y, mu0, 1, 1, 1, 1, 1)
plot(1:1000, x[-1], ylim= c(min(x)-1, max(x)+1), xlab = "Time", ylab = "True x value")
lines(xfiltered, lty="dashed", col="blue")
lines(y, lty="dashed", col="orange")
mean(x[-1]-xfiltered)
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
install.packages("numderiv")
install.packages("numDeriv")
install.packages("sspir")
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
print(mean(x[-1]-xfiltered))   # Mean Error
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/kalmanR.R')
install.packages(c("Rcpp", "rstan"))
library(Rcpp)
library(RcppArmadillo)
vignette("RcppArmadill")
vignette("RcppArmadillp")
vignette("RcppArmadillo")
vignette(package = "RcppArmadillo")
vignette("RcppArmadillo-intro")
setwd("~/Box Sync/Studies/Cpp/RCpp")
sourceCpp("kalman/kalmanRCpp.cpp")
View(kalmanfiltC)
?sourceCpp
# Simulate Data
nn = 100
w = rnorm(nn+1, 0, 1)
v = rnorm(nn, 0, 1)
x = cumsum(w)
mu0 = x[1]
y = x[-1] + v
a = kalmanfiltC(mu0,y, 1, 1, 1, 1, 1)
diag(1)
a = kalmanfiltC(mu0,y, diag(1), diag(1), diag(1), diag(1), diag(1))
sourceCpp("kalman/kalmanRCpp.cpp")
a = kalmanfiltC(mu0,y, diag(1), diag(1), diag(1), diag(1), diag(1))
x
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
xfiltered$x
x
xfiltered$P
xfiltered$P
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
xfiltered$x
x
y
sourceCpp("kalman/kalmanRCpp.cpp")
xfiltered
xpred = diag(1) %*% mu0
Ppred = diag(1) %*% diag(1) %*% t(diag(1)) + diag(1)
K = Ppred %*% t(diag(1)) %*% solve(diag(1) %*% Ppred %*% t(diag(1)) + R);
K = Ppred %*% t(diag(1)) %*% solve(diag(1) %*% Ppred %*% t(diag(1)) + diag(1));
xpred + K %*% (y[1] - diag(1) %*% xpred);
sourceCpp("kalman/kalmanRCpp.cpp")
xfiltered$x
xfiltered$x
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
x
xfiltered$x
xfiltered$x
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
plot(1:nn, x, ylim= c(min(x)-1, max(x)+1), xlab = "Time", ylab = "True x value")
lines(t(xfiltered$x), col="blue")
t(xfiltered$x)
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
sourceCpp("kalman/kalmanRCpp.cpp")
kalmanfiltC(mu0,y, diag(2), diag(1), diag(1), diag(1), diag(1))
kalmanfiltC(mu0,y, diag(2,1), diag(1), diag(1), diag(1), diag(1))
library(numDeriv)
jacobian
vignette("Rcpp-package")
?.Fortran()
cd(..)
setwd("..")
setwd("Fortran/")
system("ls")
dyn.load("fa")
dyn.load("facto.so")
dyn.load("facto.so")
dyn.load("facto.so")
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/test_logisic.R')
library(Rcpp)
library(RcppArmadillo)
library(numDeriv)
sourceCpp("kalmanRCpp_notest.cpp")
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
library(Rcpp)
library(RcppArmadillo)
library(numDeriv)
setwd("~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/")
sourceCpp("kalmanRCpp_notest.cpp")
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
source('~/Box Sync/Studies/Cpp/RCpp/kalman/efficientkalman/test_logisic.R')
k <- 100
p0 <- 0.1*k
r <- 0.2
deltaT <- 0.1
# Let's create some sample data:
# set.seed(12345)
obsVariance <- 25
nObs = 1000
nu <- rnorm(nObs, mean=0, sd=sqrt(obsVariance))
logistG <- function(x, k = 100, t = deltaT){
return(c(x[1], k * x[2] * exp(x[1]*t) / (k + x[2] * (exp(x[1]*t) - 1))))
}
# Evolution error
Q <- diag(c(0, 0))
# Observation error
R <- obsVariance
# Prior
x <- c(r, p0)
Sigma <- diag(c(144, 25))
pop <- logistG(x, k = 100, t = (1:(nObs-1))*deltaT) + nu
Estimate <- data.frame(Rate=rep(NA, nObs),
Population=rep(NA,nObs))
y = c()
for(i in 1:nObs){
# Observation
xobs <- c(0, pop[i])
y[i] <- t(as.matrix(c(0,1))) %*% xobs
}
result = extkalmanC(x0 = as.matrix(x), y = as.matrix(y), Sigma0 = Sigma, Q = Q, R = as.matrix(R),
smooth = T, f = logistG, h = function(x){return(t(as.matrix(c(0,1))) %*% x)})
plot(1:nObs, y, type = "l", col = "black")
lines(1:nObs, result$xfilt[,2], type = "l", col = "orange")
lines(1:nObs, result$xsmooth[,2], type = "l", col = "red")
